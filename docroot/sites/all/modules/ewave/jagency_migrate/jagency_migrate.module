<?php
define('VOCABULARY_ARTICLE_TYPE', 66);
define('VOCABULARY_MAIN_CATEGORY', 2);
define('VOCABULARY_P2G_SCHOOL', 126);
define('VOCABULARY_P2G_RESOURCES', 121);
define('VOCABULARY_P2G_BASKET', 131);
define('VOCABULARY_P2G_TAG', 141);
define('VOCABULARY_P2G_AUDIENCES', 91);
define('VOCABULARY_P2G_ACTIVITY', 101);
define('VOCABULARY_P2G_CONTENT', 86);
define('VOCABULARY_P2G_JEWMONTH', 146);

/**
 * Implement hook_menu() 
 */
function jagency_migrate_menu() {
  $items = array();
  
  $items['admin/config/jagency/migrate'] = array(
    'title' => 'Migration interface',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('jagency_migrate_start_form'),
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate/result'] = array(
    'title' => 'Migration Result Page',
    'page callback' => 'jagency_migrate_result_page',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate/history'] = array(
    'title' => 'Migration History Page',
    'page callback' => 'jagency_migrate_history_page',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate/start'] = array(
    'title' => 'Migration Start',
    'page callback' => 'jagency_migrate_convert_start',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate/delete'] = array(
    'title' => 'Migration Delete',
    'page callback' => 'jagency_migrate_convert_delete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate_history/delete'] = array(
    'title' => 'Migration History Delete',
    'page callback' => 'jagency_migrate_history_delete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate/blank'] = array(
    'title' => 'Migration History Delete',
    'page callback' => 'jagency_migrate_history_blank',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate/%/delete'] = array(
    'title' => 'Migration interface',
    'page callback' => 'jagency_migrate_delete', 
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/config/jagency/migrate_history/%/delete'] = array(
    'title' => 'Migration interface',
    'page callback' => 'jagency_migrate_history_delete_item', 
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

function jagency_migrate_history_delete_item($url) {
  drupal_set_message("Item deleted successfuly");
  db_delete('migration_history')->condition('website', $url)->execute();
  drupal_goto('admin/config/jagency/migrate/history');
}

function jagency_migrate_delete($hash) {
  drupal_set_message("Item deleted successfuly");
  db_delete('migration')->condition('hash', $hash)->execute();
  drupal_goto('admin/config/jagency/migrate/result');
}

function jagency_migrate_history_blank() {
  return '';
}

function jagency_migrate_history_delete() {
  drupal_set_message("All migration history items deleted");
  db_truncate('migration_history')->execute();
  drupal_goto('admin/config/jagency/migrate');
}

function jagency_migrate_history_page() {
  $path = drupal_get_path('module', 'jagency_migrate');
  $content = views_embed_view('agency_migrate_history_result', 'default');
  $content .= '<input type="button" id="edit-submit" onclick="location.href=\'/admin/config/jagency/migrate_history/delete\'" name="op" value="Delete all history items" class="form-submit">';
  return $content;
}

function jagency_migrate_convert_delete() {
  drupal_set_message("All migration items deleted");
  db_truncate('migration')->execute();
  drupal_goto('admin/config/jagency/migrate');
}

function jagency_migrate_convert_start() {
  $operations = array();
  $path = drupal_get_path('module', 'jagency_migrate');
  if (file($path . '/settings.csv')) {
    $settings = explode("\n", file_get_contents($path . '/settings.csv'));
    unset($settings[0]);
    foreach ($settings as $key => $value) {
      $settings[$key] = str_getcsv($value);
    }
  }
  $result = db_select('migration', 'm')->fields('m')->condition('status', 0, '=')->orderBy('id', 'ASC')->range(0, 200)->execute();
  while($record = $result->fetchAssoc()) {
    $current_settings = array();
    $max = 99999999;
    foreach ($settings as $key => $set) {
      $length = strlen(str_replace(rtrim(rtrim(strtolower($set[2]), '/'), '/'), '', strtolower($record['url'])));
      if ($length < $max) {
        $max = $length;
        $current_settings = $set;
      }
    }
    switch(strtolower($current_settings[1])) {
      case 'article':
        //print jagency_migrate_article_save($record, $current_settings);
        $operations[] = array('jagency_migrate_article_save', array($record['id'], $current_settings, true));
        db_update('migration')->fields(array('status' => '9'))->condition('id', $record['id'], '=')->execute();
        break;
    }
  }
  
  if (count($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'jagency_migration_finished',
      'title' => 'Jafi items import proccess',
      'init_message' => 'Data prepearing',
      'progress_message' => 'Done @current from @total.',
      'error_message' => 'Error accure.',
    );
    batch_set($batch);
    batch_process();
  } else {
    return 'Sorry no content to convert found. Plase crawl new urls first';
  }
}

/**
 * end import function
 */
function jagency_migration_finished($success, $results, $operations) {
  drupal_goto('admin/config/jagency/migrate/history');
}

function jagency_migrate_convert_start_old() {
  global $vars;
  $return = menu_execute_active_handler('admin/config/jagency/migrate/blank', FALSE);
  print drupal_deliver_page($return);
  print '<div id="page"><div class="view-content"><table class="views-table cols-4">
         <thead><tr><th class="views-field views-field-url">
            Url          </th>
                  <th class="views-field views-field-hash-1">
            Node Url          </th>
                  <th class="views-field views-field-http-status">
            Edit Url          </th>
              </tr>
      </thead>
      <tbody>';
  flush();
  ob_flush();
  
  $path = drupal_get_path('module', 'jagency_migrate');
  if (file($path . '/settings.csv')) {
    $settings = explode("\n", file_get_contents($path . '/settings.csv'));
    unset($settings[0]);
    foreach ($settings as $key => $value) {
      $settings[$key] = str_getcsv($value);
    }
  }
  $result = db_select('migration', 'm')->fields('m')->condition('status', 0, '=')->range(0, 5)->execute();
  $counter = 0;
  while($record = $result->fetchAssoc()) {
    $current_settings = array();
    $max = 99999999;
    foreach ($settings as $key => $set) {
      $length = strlen(str_replace(rtrim(rtrim(strtolower($set[2]), '/'), '/'), '', strtolower($record['url'])));
      if ($length < $max) {
        $max = $length;
        $current_settings = $set;
      }
    }
    switch(strtolower($current_settings[1])) {
      case 'article':
        print jagency_migrate_article_save($record, $current_settings);
        flush();
        ob_flush();
        break;
    }
    $counter++;
  }
  if ($counter == 0) {
    print 'Sorry no content to convert found. Plase crawl new urls first';
  } else {
    print '
            </tbody>
      </table>
          </div></div><script>location.href = "/admin/config/jagency/migrate/history";';
  }
  flush();
  ob_flush();
  die();
}

function jagency_migrate_article_save($item, $settings, $idflag = false) {
  global $user;
  if ($idflag) {
    $item = db_select('migration', 'm')->fields('m')->condition('id', $item, '=')->execute()->fetchAssoc();
  }
  watchdog('Agency Migration', 'Starting migration proccess for url: ' . $item['url'], array('item' => $item, 'settings' => $settings));
  
  $check_if_item_exist = db_select('migration_history', 'h') -> fields('h')->condition('original', $item['url'],'=')->execute()->fetchAssoc();
  if (isset($check_if_item_exist['id'])) {
    watchdog('Agency Migration', 'Sorry current item already exist in db', serialize(array('item' => $item, 'db' => $check_if_item_exist)), WATCHDOG_ERROR);
    return;
  }
  
  //include_once("includes/phpQuery.php");
  module_load_include('inc', 'jagency_pages', 'jagency_pages.phpquery');
  $output = '';
  $p2g = array(7 => 126, 8 => 121, 9 => 131, 10 => 141, 11 => 91, 12 => 101, 13 => 86, 14 => 146);
  $meta = unserialize($item['meta']);
  $doc = phpQuery::newDocumentHTML($item['content']);
  
  //use meta title if there no meta title then try to parse in html title
  if (isset($meta['dc.title']) && $meta['dc.title']) {
    $title = $meta['dc.title'];
  } else if (pq($doc['title'])->text()) {
    $title = trim(pq($doc['title'])->text());
  } else {
    $title = trim(pq($doc['.newArticleItemInner .bold'])->text());  
  }
  //let`s clean title and short it to 254 sign
  $title = mb_substr(strip_tags($title), 0, 254);
  
  //lets remove first row due duplicated content
  pq($doc['.newArticleItemInner > tbody > tr:first-child'])->remove();
  pq($doc['.newArticleItemInner > tbody > tr:first-child'])->remove();
  
  //$content = trim(pq($doc['.newArticleItemInner'])->html());
  preg_match('/<\!-- START MIDDLE -->(.*)<\!-- END MIDDLE -->/s', $item['content'], $matches);
  if (isset($matches[1])) {
    $doc2 = phpQuery::newDocumentHTML($matches[1]);
    pq($doc2['script'])->remove();
    //pq($doc2['#newSocialMediaLinks'])->parents('table')->remove();
    //pq($doc2['table:last'])->remove();
    $content = trim(pq($doc2)->html());
    //remove buttom social links
    $content = preg_replace('/<\!-- START bottom comments -->(.*)<\!-- END bottom comments -->/s', '', $content);
    pq($doc2['#newSocialMediaLinks'])->remove();
    
  } else if(trim(pq($doc['.newArticleItemInner'])->html())) {
    $content = trim(pq($doc['.newArticleItemInner'])->html());
  } else {
    watchdog('Agency Migration', 'Content not found please review', serialize(array('item' => $item, 'settings' => $settings)), WATCHDOG_ERROR);
  }
  
  //$content = trim(pq($doc['.newArticleItemInner #text'])->html()) . trim(pq($doc['.newArticleItemInner #data1'])->html());
  $content = preg_replace("/(\r\n|\n|\r)/", "", $content);
  $content_doc = phpQuery::newDocumentHTML($content);
  
  //fetch images from original content
  $orignal_images = pq($content_doc)->find('img');
  foreach ($orignal_images as $image) {
    $src = pq($image)->attr('src');
    if ($src) {
      try {
        $image = jagency_migrate_file_upload($src, 'http://jafi.org');
        if (isset($image->uri)) {
          $content = str_replace($src, file_create_url($image->uri), $content);
        }
      } catch(Exception $ex) {
        watchdog('Agency Migration', 'Exception happen, please review variable to check what was wrong', array('exception' => $ex), WATCHDOG_ERROR);
      }
    }
  }
  
  //fetch flash items from original content
  $orignal_embeds = pq($content_doc)->find('embed');
  foreach ($orignal_embeds as $embed) {
    $src = pq($embed)->attr('src');
    if ($src) {
      try {
        $embed = jagency_migrate_file_upload($src, 'http://jafi.org');
        if (isset($embed->uri)) {
          $content = str_replace($src, file_create_url($embed->uri), $content);
        }
      } catch(Exception $ex) {
        watchdog('Agency Migration', 'Exception happen, please review variable to check what was wrong', array('exception' => $ex), WATCHDOG_ERROR);
      }
    }
  }
  
  //fetch files in pages and replace them with local
  $extension = array('ppt', 'doc', 'pdf', 'zip', 'jpg', 'gif', 'png', 'swf');
  $parsed_links = pq($content_doc)->find('a');

  foreach ($parsed_links as $parsed_link) {
    $href = pq($parsed_link)->attr('href');
    $parsed_href = pathinfo($href);
    $parsed_url = parse_url($href);
    if (isset($parsed_href['extension']) && ($parsed_url['host'] == 'jafi.org' || !isset($parsed_url['host'])) && in_array($parsed_href['extension'], $extension)) {
      try {
        $file = jagency_migrate_file_upload($href, 'http://jafi.org');
        if (isset($file->uri)) {
          $content = str_replace($href, file_create_url($file->uri), $content);
        } else {
          watchdog('Agency Migration', 'Cant upload file ' . $href, array(serialize(array('item' => $item, 'settings' => $settings, 'file' => $file, 'source' => $href))), WATCHDOG_ERROR);
        }
      } catch(Exception $ex) {
        watchdog('Agency Migration', 'Exception happen, please review variable to check what was wrong', array('exception' => $ex), WATCHDOG_ERROR);
      }
    }
  }
  
  $entity_create = entity_create('node', array('type' => 'article'));
  $entity = entity_metadata_wrapper('node', $entity_create);
    
  $entity->title = $title;
  $entity->promote = 1;
  $entity->author = $user->uid;
  
  //update first image of item
  /*
  $first_image = pq($doc['.newArticleItemInner .linehit16 img'])->attr('src');
  if ($first_image) {
    $first_image = jagency_migrate_file_upload($first_image, 'http://jafi.org');
    if (isset($first_image->uri)) {
      $content = '<div class="main_article_migration_image"><img src="' . file_create_url($first_image->uri) . '"></div>' . $content;
    }
    //$entity->field_main_image = array('fid' => $first_image->fid);
  }*/
  $content = '<div class="migration_content">' . $content . '</div>';
  //$entity->field_description->set(array(LANGUAGE_NONE => array(array('value' => $content))));
  
  if ($settings[4]) {
    $entity->field_aticle_type->set(jagency_migrate_term_calculate(VOCABULARY_ARTICLE_TYPE, trim($settings[4]), false, 'string'));
  } else {
    watchdog('Agency Migration', 'There no term found for item', array('item' => $item, 'settings' => $settings), WATCHDOG_ERROR);
  }
  
  if ($settings[3]) {
    $entity->field_main_category->set(jagency_migrate_term_calculate(VOCABULARY_MAIN_CATEGORY, trim($settings[3]), false, 'string'));
  } else {
    watchdog('Agency Migration', 'There no term found for item', array('item' => $item, 'settings' => $settings), WATCHDOG_ERROR);
  }
  
  if (isset($meta['keywords']) && $meta['keywords']) {
    $entity->field_program_tags->set(jagency_migrate_term_calculate(VOCABULARY_P2G_TAG, $meta['keywords'], ","));
  }
  /*$tags = array();
  if (isset($meta['keywords'])) {
    $keywords = jagency_migrate_term_calculate(VOCABULARY_P2G_TAG, $meta['keywords'], ",");
    if ($keywords) {
      $tags = $keywords;
    }
  }
  
  if (count($tags)) {
    foreach($tags as $tid) {
      $entity->field_program_tags[NULL]->set($tid);
    }
  }
  
  /*if (isset($meta['db_audience']) && $meta['db_audience']) {
    $entity->field_main_category->set(jagency_migrate_term_calculate(VOCABULARY_P2G_AUDIENCES, $meta['db_audience'], ","));
  }

  if (isset($meta['keywords']) && $meta['keywords']) {
    $entity->field_program_tags->set(jagency_migrate_term_calculate(VOCABULARY_P2G_TAG, $meta['keywords'], ","));
  }
  
  /*for($i = 7; $i <= 14; $i++) {
    if (isset($settings[$i]) && $settings[$i]) {
      $tags = array_merge($tags, jagency_migrate_term_calculate($p2g[$i], $settings[$i], ","));
    }
  }

  if (count($tags)) {
    $ttt = array();
    foreach($tags as $tid) {
      $entity->field_program_tags[NULL]->set($tid);
    }
  }*/

  //$test = node_load(5450);
  //d($test);
  
  $entity->save();

  $node = node_load($entity->nid->value());
  $node->field_description[LANGUAGE_NONE][0]['value'] = $content;
  $node->field_description[LANGUAGE_NONE][0]['safe_value'] = $content;
  $node->field_description[LANGUAGE_NONE][0]['format'] = 'full_html';
  $node->field_more_about_status[LANGUAGE_NONE][0]['value'] = 0;
  $node->created = $node->changed = strtotime($meta['udt_createdate']);
  $path = pathauto_clean_alias(pathauto_cleanstring($settings[3]) . '/content/' . $node->nid);
  //$node->path = array('alias' => $path, 'source' => 'node/' . $node->nid, 'language' => LANGUAGE_NONE, 'pathauto' => 1);
  $node->comment = array('status' => 1);
  if (isset($item['domain_id']) && $item['domain_id']) {
    $domain = domain_load($item['domain_id']);
    if (isset($domain['domain_id'])) {
      $node->domains = array($domain['domain_id'] => $domain['domain_id']);
      $node->domain_site = $domain['domain_id'];
      $node->subdomains = array($domain['domain_id'] => $domain['sitename']);
      $node->domain_source = $domain['domain_id'];
    }
  }

  node_save($node);
  
  db_update('url_alias')->fields(array('language' => 'und', 'alias' => $path))->condition('source', 'node/' . $node->nid)->execute();
  
  //redirect section
  $redirect = new stdClass();
  $parsed_redirect_url = parse_url($item['url']);
  redirect_object_prepare($redirect);
  $redirect->source = substr($parsed_redirect_url['path'], 1);
  $redirect->redirect = 'node/' . $node->nid;
  $redirect->language = LANGUAGE_NONE;
  // Check if the redirect exists before saving.
  $hash = redirect_hash($redirect);
  if (!redirect_load_by_hash($hash)) {
    redirect_save($redirect);
  }
  
  
  //insert new url of current node in case we need to replace all links after
  db_insert('migration_history') -> fields(array(
    'original' => $item['url'],
    'website' => $path,
  ))
  ->execute();
  
  db_update('migration')->fields(array('status' => '1'))->condition('id', $item['id'], '=')->execute();
  
  $output .= '
          <tr class="odd views-row-first views-row-last">
                  <td class="views-field views-field-url"><a href="' . $item['url'] . '">' . $item['url'] . '</a></td>
                  <td class="views-field views-field-hash-1"><a href="/'.$path.'">'.$path.'</a></td>
                  <td class="views-field views-field-http-status"><a href="'.url('node/' . $node->nid . '/edit').'">Edit</a></td>';
  return $output;
}

function jagency_migrate_file_upload($filename, $host) {
  $original = $filename;
  if (strpos($filename, 'jafi.org') === false) {
    $filename2 = canonicalize($filename);
    if ($filename2) {    
      $filename = $host . $filename2;
    } else {
      $filename = $host . '/' . basename($filename);
    }
  } else {
    $filename = canonicalize($filename);
  }
  $file = new stdClass;
  $image = file_get_contents($filename);
  $basename = basename($filename);
  if ($image) {
    $file = file_save_data($image, 'public://' . $basename, FILE_EXISTS_RENAME);
  } else {
    watchdog('Agency Migration', 'We cant find image for current item', serialize(array('filename' => $filename, 'original' => $original)), WATCHDOG_ERROR);
  }
  return $file;
}

function canonicalize($address) {
  $address = explode('/', $address);
  $keys = array_keys($address, '..');
  foreach($keys AS $keypos => $key) {
      array_splice($address, $key - ($keypos * 2 + 1), 2);
  }
  $address = implode('/', $address);
  $address = str_replace('./', '', $address);
  if (strlen($address) == 0) {
    $address = basename($address);
  }
  return $address;
}

function jagency_migrate_term_calculate($vid, $terms, $explode = false, $type = 'array') {
  $output = NULL;
  if ($terms) {
    if ($explode) {
      $terms = explode($explode, $terms);
      $output = array();
      if ($vid) {
        $vocab = taxonomy_vocabulary_load($vid);
      }
      foreach ($terms as $term) {
        if (isset($vocab->machine_name)) {
          $term = taxonomy_get_term_by_name($term, $vocab->machine_name);
        } else {
          $term = taxonomy_get_term_by_name($term);
        }
        if (is_array($term)) {
          $term = array_pop($term);
          if (isset($term->tid)) {
            $output[$term->tid] = $term->tid;
          } else {
            watchdog('Agency Migration', 'We cant find term for current value ', array('vid' => $vid, 'terms' => $terms), WATCHDOG_ERROR);
          }
        } else {
          watchdog('Agency Migration', 'We cant find term for current value ', array('vid' => $vid, 'terms' => $terms), WATCHDOG_ERROR);
        }
      }
    } else {
      if ($vid) {
        $vocab = taxonomy_vocabulary_load($vid);
        $term = taxonomy_get_term_by_name($terms, $vocab->machine_name);
      } else {
        $term = taxonomy_get_term_by_name($terms);
      }
      if (is_array($term)) {
        $term = array_pop($term);
        if ($type == 'array') {
          $output[$term->tid] = $term->tid;
        } else {
          if (isset($term->tid)) {
            $output = $term->tid;
          } else {
            watchdog('Agency Migration', 'We cant find term for current value', array('vid' => $vid, 'terms' => $terms), WATCHDOG_ERROR);
          }
        }
      } else {
        watchdog('Agency Migration', 'We cant find term for current value', array('vid' => $vid, 'terms' => $terms), WATCHDOG_ERROR);
      }
    }
  }
  return $output;
}

function jagency_migrate_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'jagency_migrate') . '/views',
    'template path' => drupal_get_path('module', 'jagency_migrate') . '/themes',
  );
}

function jagency_migrate_result_page() {
  $path = drupal_get_path('module', 'jagency_migrate');
  //$result = db_select('migration', 'm') ->fields('m')->execute()->fetchAssoc();
  $content = views_embed_view('agency_migrate_result', 'panel_pane_1');
  if (file($path . '/settings.csv')) {
    $content .= "<small>Please note we going to use settings file placed in module folder</small><br />";
  }
  $content .= '<input type="button" id="edit-submit" onclick="location.href=\'/admin/config/jagency/migrate/start\'" name="op" value="Start converting proccess" class="form-submit">&nbsp;&nbsp;&nbsp;';
  $content .= '<input type="button" id="edit-submit" onclick="location.href=\'/admin/config/jagency/migrate/delete\'" name="op" value="Delete all items" class="form-submit">';
  return $content;
}

function jagency_migrate_start_form($form, &$form_state) {
    
  $form['start_url'] = array( 
    '#type' => 'textarea', 
    '#title' => t('Migration urls:'),
    '#description' => t('Enter url, you can use number of urls, each url in separate line!'),
  );
  
  $domains = array();
  foreach (domain_domains() as $key => $domain) {
    $domains[$key] = $domain['sitename'];
  }
  $form['domain'] = array( 
    '#type' => 'select', 
    '#title' => t('Domain to migrate:'),
    '#maxlength' => 255,
    '#options' => $domains,
    '#description' => t('Enter start url to crawl from)'),
  );
  $form['submit'] = array(
    '#value' => t('Start crawling'),
    '#type' => 'submit'
  );
  return $form;
}

function jagency_migrate_crawl($url, $domain) {
  set_time_limit(10000);
  $parsed = parse_url($url);
  $crawler = new JagencyCrawler();
  $crawler->domain_id = $domain;
  $crawler->setURL($url);
  $crawler->setFollowMode(3);
  $crawler->addContentTypeReceiveRule("#text/html#");
  //$crawler->addURLFilterRule("#\.(jpg|jpeg|gif|png)$# i");
  //$crawler->addURLFilterRule("%(?!".preg_quote($parsed['path']).".*%ix");
  $crawler->enableCookieHandling(true);
  //$crawler->setTrafficLimit(1000 * 1024);
  $crawler->setLinkExtractionTags(array('href'));
  $crawler->go();
  return $crawler->getProcessReport();
}

function jagency_migrate_start_form_submit($form, $form_state) {
  print '<h2>Migration scanning report</h2>';
  $urls = explode("\r\n", $form_state['values']['start_url']);
  $domain = $form_state['values']['domain'];
  foreach ($urls as $url) {
    print '<strong>Crawling started with url: ' . $url . '</strong><br />';
    print "<textarea style=\"width:100%; height: 300px;\">";
    $report = jagency_migrate_crawl($url, $domain);
    print "</textarea>";
    print "<br /><br />";
  }
  print "Summary:"."\n";
  print "Links followed: " . $report->links_followed . "<br />";
  print "Documents received: " . $report->files_received . "<br />";
  print "Bytes received: " . $report->bytes_received . " bytes" . "<br />";
  print "Process runtime: " . $report->process_runtime . " sec" . "<br />";
  print "<br /><br /><a href=\"/admin/config/jagency/migrate/result\">Go to Result page</a>";
  die();
}

include_once("includes/PHPCrawl/libs/PHPCrawler.class.php");

// Extend the class and override the handleDocumentInfo()-method 
class JagencyCrawler extends PHPCrawler {
  
  public function handleDocumentInfo(PHPCrawlerDocumentInfo $DocInfo) {
  //function handleDocumentInfo($DocInfo) {
    // Just detect linebreak for output ("\n" in CLI-mode, otherwise "<br>").
    $lb = "\n";
    // Print the URL and the HTTP-status-Code
    echo "Page requested: ".$DocInfo->url." (".$DocInfo->http_status_code.")".$lb;
    $links_to_crawl = array();
    foreach ($DocInfo->links_found as $link) {
      if (strpos($link['url_rebuild'], $this->starting_url) !== false) {
        $link['url_rebuild'] = str_replace('?WBCMODE=PresentationUnpublished', '', $link['url_rebuild']);
        if (strpos($link['url_rebuild'], '&') !== false) {
          $link['url_rebuild'] = str_replace('&', '', $link['url_rebuild']);
        }
        $links_to_crawl[] = new PHPCrawlerURLDescriptor($link['url_rebuild'], $link['link_raw'], $link['linkcode'], $link['linktext'], $link['refering_url']);
      }
    }
    
    $this->LinkCache->addURLs($links_to_crawl);
    //d($this->LinkCache->getUrlMap(), $this->LinkCache->getUrls());
    echo "Total links found: " . count($DocInfo->links_found) . " links on page that we need to crawl: " . count($links_to_crawl) . $lb . $lb;
    foreach ($links_to_crawl as $key => $link) {
      print $key . ' >>>> ' . $link->url_rebuild . $lb;
    }
    echo $lb . '-----------------------------------------------------------------------------------------------------------------------' . $lb . $lb;
    
    if (strpos($DocInfo->url, $this->starting_url) !== false) {
      if (intval($DocInfo->http_status_code) == 200) {
        try {
          $DocInfo->url = rtrim(rtrim($DocInfo->url, '/'), '/');
          $result = db_select('migration', 'm') ->fields('m')->condition('hash', md5(strtolower($DocInfo->url)), '=')->execute()->fetchAssoc();
          if (!isset($result['id'])) {
            db_insert('migration') -> fields(array(
              'hash' => md5(strtolower($DocInfo->url)),
              'url' => $DocInfo->url,
              'parent' => $DocInfo->referer_url,
              'http_status' => $DocInfo->http_status_code,
              'content' => $DocInfo->content,
              'domain_id' => $this->domain_id,
              'meta' => is_array($DocInfo->meta_attributes) ? serialize($DocInfo->meta_attributes) : serialize(array())
            ))
            ->execute();
            watchdog('Agency Migration', 'We added url to migration proccess', array('url' => $DocInfo->url, 'parent' => $DocInfo->referer_url));
          }
        } catch(Exception $ex) {
          watchdog('Agency Migration', 'Exception happen, please review variable to check what was wrong', array('exception' => $ex, 'docinfo' => $DocInfo));
        }
      } else {
        watchdog('Agency Migration', 'Link found but it has wrong html status: ' . $DocInfo->http_status_code, array('docinfo' => $DocInfo));
      }
    } else {
      watchdog('Agency Migration', 'Link not matched needed criterion' . $DocInfo->http_status_code, array('docinfo' => $DocInfo));
    }
    ob_flush();
    flush();
  } 
}