<?php

/**
 * @file
 * Defines a slider RANGE widget to create filters for numeric and list fields.
 */


/**
 * Implements hook_help().
 */
function slide_with_style_help($path, $arg) {
  switch ($path) {
    case 'admin/help#slide_with_style':
      $t = t('Configuration and usage instructions are in this <a href="@README">README</a> file.<br/>Known issues and solutions may be found on the <a href="@select_with_style">Select with Style</a> project page.', array(
        '@README' => url(drupal_get_path('module', 'slide_with_style') . '/README.txt'),
        '@select_with_style' => url('http://drupal.org/project/select_with_style')));
      break;
  }
  return empty($t) ? '' : '<p>' . $t . '</p>';
}

/**
 * Implements hook_menu().
 */
function slide_with_style_menu() {
  $items = array();
  // Put the administrative settings under System on the Configuration page.
  $items['admin/config/system/slide_with_style'] = array(
    'title' => 'Slide with Style',
    'description' => 'Configure Slide with Style module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slide_with_style_admin_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'slide_with_style.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function slide_with_style_field_widget_info() {
  // @todo dynamically build list types, including contrib modules
  $number_types = array('number_decimal', 'number_float', 'number_integer');
  $list_types = array('list_text', 'list_integer', 'list_float');

  $widget_info = array(
    'slide_with_style_slider' => array(
      'label' => t('Slider'),
      'field types' => array_merge($number_types, $list_types),
      'settings' => array(
        'step' => 1,
        'appearance' => array(
          'with_textfield' => 'with_textfield',
          'with_bubble' => 'with_bubble'
        ),
        'css file' => '' // default is no style override
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      )
    )
  );
  return $widget_info;
}

/**
 * Implements hook_field_widget_form().
 *
 * Creates a textfield with CSS class for the JS to attach the slider to.
 */
function slide_with_style_field_widget_form(&$form, &$form_state, $field, $instance, $lang, $items, $delta, $element) {

  switch ($field['module']) {
    case 'list':
      $additions = array('value' => array(
        '#title' => $element['#title'], // or $instance['label']
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]) ? reset($items[$delta]) : NULL,
        '#required' => $element['#required'],
        '#size' => 5, // needs to hold single integer or range, eg. "5--10"
      ));
      break;

    default:
      // Use the default numeric field widget as a base.
      $additions = number_field_widget_form($form, $form_state, $field, $instance, $lang, $items, $delta, $element);
      // When used as a range, this field is read-only
      $additions['value']['#size'] = min(8, $additions['value']['#size']);
  }
  $element += $additions; // all additions are in $element['value']

  // Define the class through which the javascript will find this textfield.
  $element['value']['#attributes']['class'][] = "edit-slide-with-style-slider";
  // Append to the textfield a placeholder for the slider
  $element['value']['#suffix'] = '<div class="slide-with-style-slider"></div>';

  $has_multiple_values = field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT;

  // id needs to match up with the element id generated by core for this input element.
  $base_id = 'edit-' . trim($instance['field_name'], '_ ') . "-$lang-";
  $id = drupal_html_class($base_id . ($has_multiple_values ? "$delta-value" : 'value'));

  // Pass jQueryUI slider parameters via the js settings.
  $widget_settings = $instance['widget']['settings'];
  $text_values = FALSE;
  if ($field['module'] == 'number') {
    $min = $instance['settings']['min'];
    $max = $instance['settings']['max'];
  }
  elseif ($field['module'] == 'list') {
    if (!empty($field['settings']['allowed_values'])) {
      $text_values = $field['settings']['allowed_values'];
      $keys = array_keys($text_values);
      $min = reset($keys);
      $max = array_pop($keys);
    }
  }
  $slider_parameters = array(
    $id => array(
      'step' => empty($widget_settings['step']) ?  1 : $widget_settings['step'],
      'min' => $min,
      'max' => $max,
      'value' => isset($element['value']['#default_value']) ? $element['value']['#default_value'] : $min,
      'textfield' => !empty($widget_settings['appearance']['with_textfield']),
      'textvalues' => $text_values,
      'bubble' => !empty($widget_settings['appearance']['with_bubble']),
      'orientation' => empty($widget_settings['appearance']['vertical']) ? 'horizontal' : 'vertical',
      'range' => 'min',
      'autosubmit' => FALSE
    )
  );
  // Start by attaching settings or it will break global_filter_field_slider_widget_form_alter()
  $element['value']['#attached']['js'][] = array(
    'data' => array('slider' => $slider_parameters),
    'type' => 'setting',
    'scope' => 'header'
  );
  $path = drupal_get_path('module', 'slide_with_style');
  $element['value']['#attached']['js'][]  = $path . '/slide_with_style.js';

  $element['value']['#attached']['css'][] = $path . '/slide_with_style.css';
  $css_files = slide_with_style_css_files();
  if (!empty($css_files[$widget_settings['css file']])) {
    $element['value']['#attached']['css'][] = $css_files[$widget_settings['css file']];
  }
  $element['value']['#attached']['library'][] = array('system', 'ui.slider');

  // Just in case we need to do more stuff after the form has been built...
  $element['value']['#process'][] = 'slide_with_style_field_widget_process';
  return $element;
}

/**
 * Element #process callback, if required.
 */
function slide_with_style_field_widget_process($element, &$form_state, $form) {
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function slide_with_style_field_widget_settings_form($field, $instance) {

  $settings = $instance['widget']['settings'];

  switch ($instance['widget']['type']) {

    case 'slide_with_style_slider':

      $form['appearance'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Slider appearance'),
        '#default_value' => $settings['appearance'],
        '#options' => array(
          'with_textfield' => t('with synchronised text field'),
          'with_bubble' => t('with value bubble'),
          'vertical' => t('vertical instead of horizontal')
        )
      );
      if ($field['module'] == 'number') {
        $form['step'] = array(
          '#type' => 'textfield',
          '#title' => t('Step'),
          '#default_value' => $settings['step'],
          '#description' => t('The increment that the slider should snap to.'),
          '#element_validate' => array('_element_validate_number'),
          '#required' => TRUE,
        );
      }
      $options = array('' => 'core (no styling)');
      foreach (slide_with_style_css_files() as $name => $filespec) {
        $options[$name] = $name;
      }
      $form['css file'] = array(
        '#type' => 'select',
        '#multiple' => FALSE,
        '#size' => 1,
        '#title' => t('Additional slider styling file'),
        '#default_value' => $settings['css file'],
        '#options' => $options,
        '#description' => t('The directory where the above files are looked up may be changed on the Slide with Style <a href="@href">configuraton page</a>.', array(
          '@href' => url('admin/config/system/slide_with_style'),
        )),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_field_widget_error().
 *
 * @see number_field_widget_validate()
 * @see form_error()
 */
function slide_with_style_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make min/max required when using any of the slider widgets.
 */
function slide_with_style_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['module'] == 'number') {
    $form['instance']['settings']['min']['#required'] = TRUE;
    $form['instance']['settings']['max']['#required'] = TRUE;
  }
}

/**
 * Returns an array of CSS files in a directory.
 *
 * @param $dir
 *   A stream wrapper URI that is a directory or NULL to use the directory
 *   set on the configuration page.
 *
 * @return
 *   An array of full CSS file names in the supplied directory.
 */
function slide_with_style_css_files($dir = NULL) {
  if (empty($dir)) {
    $default_path = drupal_get_path('module', 'slide_with_style') . '/css';
    $path = variable_get('slide_with_style_css_directory', $default_path);
    $dirname = DRUPAL_ROOT . "/$path";
  }
  else { // not tested, not used
    $dirname = file_stream_wrapper_uri_normalize($dir);
  }
  $files = array();
  if ($all_files = @scandir($dirname)) {
    foreach ($all_files as $filename) {
      if (drupal_substr($filename, -4) == '.css' && is_file("$dirname/$filename")) {
        $files[$filename] = "$path/$filename";
      }
    }
  }
  return $files;
}