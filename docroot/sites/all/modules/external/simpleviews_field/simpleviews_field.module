<?php

/**
 * Implements of hook_field_info().
 */
function simpleviews_field_field_info() {
  return array(
    'simpleviews_field' => array(
      'label' => t('Simple Views Field'),
      'description' => t('Simple Views Field.'),
      'default_widget' => 'simpleviews_field',
      'default_formatter' => 'simpleviews_field_formatter_default',
    ),
  );
}

/**
 * Implements of hook_field_widget_info().
 */
function simpleviews_field_field_widget_info() {
  return array(
    'simpleviews_field' => array(
      'label' => t('Simple Views Field'),
      'field types' => array('simpleviews_field'),
    ),
  );
}

/**
 * Implements hook_field_prepare_view().
 */
function simpleviews_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id] =  array(0);
    }
  }
}

function simpleviews_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['default_view'] = array(
    '#type' => 'textfield',
    '#title' => 'Default View',
    '#description' =>  t('Set the default view to use as dynamic-view base (machine name).'),
    '#default_value' => $settings['default_view'] ? $settings['default_view'] : 'simpleviews_field_dynamic_view'
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function simpleviews_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $values = array();
  foreach ($items as $delta => $value) {
    if (!empty($value['value'])) {
      $values = unserialize($value['value']);
    } else if (is_array($value)) {
      $values = $value;
    }
  }
  $view = views_get_view(_simpleviews_field_get_default_view($field));

  $element['contact_information'] = array(
    '#type' => 'markup',
    '#markup' => '<h3>' . $instance['label'] . '</h3><hr />',
  );
  
  // Layout
  $element['layout'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $display_option = array();
  foreach ($view->display as $id => $display) {
    if ($id != 'default') {
      $display_option[$id] = $display->display_title;
    }
  }
  $element['layout']['list_type'] = array(
    '#type' => 'select',
    '#title' => t('Display'),
    '#options' => $display_option,
    '#description' => t('Select a dispaly style.'),  
    '#default_value' => isset($values['layout']['list_type']) ? $values['layout']['list_type'] : reset($display_option),
  );
  $element['layout']['use_pager'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use pager'),
    '#description' => t('If check, a pager will be placed.'),  
    '#default_value' => isset($values['layout']['use_pager']) ? $values['layout']['use_pager'] : TRUE,
  );
  $element['layout']['items_per_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Items per page'),
    '#size' => 2,
    '#description' => t('The number of items per page if pager is checked, else, the total number of items which will be display.'),    
    '#default_value' => isset($values['layout']['items_per_page']) ? $values['layout']['items_per_page'] : 5,     
  );

  //filters
  $element['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filters'),
    '#tree' => TRUE,  
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // Content types options.
  $type_options['all'] = t('- All -');
  foreach (node_type_get_names() as $node_type => $type_name) {
    $type_options[$node_type] = $type_name;
  }
  $element['filters']['node_type'] = array(
    '#type' => 'select',
    '#title' => t('Content Type'),
    '#options' => $type_options,
    '#description' => t('Filter items by content types.'),
    '#multiple' => TRUE,  
    '#default_value' => isset($values['filters']['node_type']) ? $values['filters']['node_type'] : NULL,  
  );
  
  // Taxonomy's vocabularies list options.
  //$vocab_options_mn['all'] = t('- All -');
  //$vocab_options_vid['all'] = t('- All -');
  $options = array();
  foreach (taxonomy_get_vocabularies() as $vocab) {
    $vocab_options_mn[$vocab->machine_name] = $vocab->name;
    $vocab_options_vid[$vocab->vid] = $vocab->name;
    $items = _simpleviews_field_get_term_options($vocab->vid);
    if (count($items)) {
      if (!isset($options[$vocab->name])) {
        $options[$vocab->name] = array();
      }
      $options[$vocab->name] = $items;
    }
  }
  
  /*$element['filters']['vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => $vocab_options_vid,
    '#description' => t('Filter items by taxonomy vocabulary.'),    
    '#default_value' => isset($values['filters']['vocabulary']) ? $values['filters']['vocabulary'] : NULL,  
    '#ajax' => array(
      'callback' => 'simpleviews_field_ajax_callback',
      'wrapper' => 'replace_div', 
    ),
  );
  // Get the value of the selected vocabulary, to build the terms options array by ajax.
  if (isset($form_state['triggering_element']['#parents']) && $form_state['triggering_element']['#parents'][0] == 'skip') {
    $val = isset($values['filters']['vocabulary']) ? $values['filters']['vocabulary'] : null;
  } else {
    $field = !empty($form_state['triggering_element']['#parents']) ? $form_state['triggering_element']['#parents'] : NULL;
    $val = !empty($form_state['values']) ? drupal_array_get_nested_value($form_state['values'], $field) : (isset($values['filters']['vocabulary']) ? $values['filters']['vocabulary'] : null);
  }
  $options = _simpleviews_field_get_term_options($val);*/
  
  $default_value = array();
  if (isset($values['filters']['term']) && is_array($values['filters']['term'])) {
    foreach ($values['filters']['term'] as $key => $val) {
      $default_value[] = array_pop($val);
    }
  } else if (isset($values['filters']['term'])) {
    $default_value[] = $values['filters']['term'];
  }
  
  $type = str_replace('options_', '', $instance['widget']['type']);  
  $element['filters']['term'] = array(
    '#type' => 'select',
    '#title' => t('Term'),
    '#options' => $options,
    '#multiple' => true,
    '#description' => t('Filter items by taxonomy term (drill down).'),    
    '#default_value' => $default_value,
    '#process' => array('select2widget_process_callback', 'ajax_process_form'),
    '#element_validate' => array('select2widget_field_widget_validate'),  
    //'#prefix' => '<div id="replace_div">',
    //'#suffix' => '</div>',
  );
  
  $element['filters']['term_type'] = array(
    '#type' => 'select',
    '#title' => '',
    '#options' => array('OR' => 'OR', 'AND' => 'AND'),
    '#description' => t('Select "AND" to receive items that belong to all the terms.<br />Select "OR" to recive items that belong to any of the terms.<br /><small style="color:red">Plase note when use "AND" not to choose more then 4 terms</small>'),    
    '#default_value' => isset($values['filters']['term_type']) ? $values['filters']['term_type']: ''
    //'#prefix' => '<div id="replace_div">',
    //'#suffix' => '</div>',
  );
  
  //sorts  
  $element['sorts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sort'),
    '#tree' => TRUE,  
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $sort_options = array();
  foreach ($view->display['default']->display_options['sorts'] as $option) {
    $sort_options[$option['table'] . '_' . $option['id']] = $option['id'];
  }
  
  $element['sorts']['sort_type'] = array(
    '#type' => 'select',
    '#title' => t('Sort criteria'),
    '#options' => $sort_options,
    '#description' => t('Select a sort criteria.'),
    '#default_value' => isset($values['sorts']['sort_type']) ? $values['sorts']['sort_type'] : NULL,  
  );
  $element['sorts']['sort_order'] = array(
    '#type' => 'select',
    '#title' => t('Sort order'),
    '#options' => array("asc", "desc"),
    '#description' => t('Select a sort order.'),     
    '#default_value' => isset($values['sorts']['sort_order']) ? $values['sorts']['sort_order'] : NULL,
  );
  
  // exposed filters
  $element['exposed_filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Exposed filters'),
    '#tree' => TRUE, 
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $element['exposed_filters']['toggle_search'] = array(
    '#type' => 'checkbox',
    '#title' => t('Expose a search box'),
    '#description' => t('If check, a free text search box will be display, which help refine items by title.'),     
    '#default_value' => isset($values['exposed_filters']['toggle_search']) ? $values['exposed_filters']['toggle_search'] : FALSE,
  );
  $element['exposed_filters']['show_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Expose a filter by term refiner'),
    '#description' => t('If check, a select term refiner will be dispaly (select a vocabulary terms list from the list below).'),   
    '#default_value' => isset($values['exposed_filters']['show_form']) ? $values['exposed_filters']['show_form'] : FALSE,  
  );
  $element['exposed_filters']['show_rss'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display a RSS link'),
    '#description' => t('If check, a rss icon will be displayed.'),   
    '#default_value' => isset($values['exposed_filters']['show_rss']) ? $values['exposed_filters']['show_rss'] : FALSE,  
  );
  $element['exposed_filters']['exposed_vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Expose a filter by term refiner - vocabulary'),
    '#options' => $vocab_options_mn,
    '#description' => t('Select the taxonomy vocabulary which his term be display as a select options.'),   
    '#default_value' => isset($values['exposed_filters']['exposed_vocabulary']) ? $values['exposed_filters']['exposed_vocabulary'] : NULL, 
  );
  $element['contact_information2'] = array(
    '#type' => 'markup',
    '#markup' => '<hr />',
  );
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function simpleviews_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    $items[$delta]['value'] = serialize($value); 
  }
}

/**
 * Ajax callback for simpleviews_field form
 * Needs to add ['options'] to the form before the element.
 * Thats how boxes_box build it
 */
function simpleviews_field_ajax_callback($form, $form_state) {
  $field = $form_state['triggering_element']['#parents'];
  return $form[$field[0]][$field[1]][$field[2]][$field[3]]['term'];
}

/**
 * Implements hook_field_is_empty().
 */
function simpleviews_field_field_is_empty($item, $field) {
  return FAlSE; //empty($item['value']);
}

/**
 * Implements hook_field_widget_error().
 */
function simpleviews_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_formatter_info().
 */
function simpleviews_field_field_formatter_info() {
  return array(
    'simpleviews_field_formatter_default' => array(
      'label' => t('Simple Views Field (default)'),
      'field types' => array('simpleviews_field'),
    ),
  );
}

/**
 * Implements of hook_field_formatter_view().
 */
function simpleviews_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // atate an array of arguments.
  foreach ($items as $delta => $item) {
    $param = unserialize($item['value']);
    $default_value = array();
    if (isset($param['filters']['term']) && is_array($param['filters']['term'])) {
      foreach ($param['filters']['term'] as $key => $val) {
        $default_value[] = array_pop($val);
      }
    } else if (isset($param['filters']['term'])) {
      $default_value[] = $param['filters']['term'];
    }
    
    if (isset($param['filters']['term_type']) && $param['filters']['term_type'] == 'AND') {
      $param['filters']['term'] = implode(',', $default_value);
    } else {
      $param['filters']['term'] = implode('+', $default_value);
    }
    
    if (isset($param['filters']['node_type']) && is_array($param['filters']['node_type'])) {
      $param['filters']['node_type'] = implode('+', $param['filters']['node_type']);
    }
    
    $args = array(
      // Layout.  
      isset($param['layout']['use_pager']) ? $param['layout']['use_pager'] : 1,
      isset($param['layout']['items_per_page']) ? $param['layout']['items_per_page'] : 10,
      // Sort  
      isset($param['sorts']['sort_type']) ? $param['sorts']['sort_type'] : '',
      isset($param['sorts']['sort_order']) ? $param['sorts']['sort_order']: '',
      // Exposed Filter.
      isset($param['exposed_filters']['show_form']) ? $param['exposed_filters']['show_form'] : false,
      isset($param['exposed_filters']['exposed_vocabulary']) ? $param['exposed_filters']['exposed_vocabulary'] : false,
      isset($param['exposed_filters']['toggle_search']) ? $param['exposed_filters']['toggle_search'] : false,
      // Filters.  
      isset($param['filters']['node_type']) ? $param['filters']['node_type'] : 'all',
      (isset($param['filters']['vocabulary']) && $param['filters']['vocabulary'] ? $param['filters']['vocabulary'] : 'all'),
      (trim($param['filters']['term']) != '' ? $param['filters']['term'] : 'all'),
      $entity->nid,
      isset($param['exposed_filters']['show_rss']) ? $param['exposed_filters']['show_rss'] : 0,
    );
    if ($args[1] != 0) {
      $view = views_get_view(_simpleviews_field_get_default_view($field));
      $view->set_arguments($args);
      $list_type = isset($param['layout']['list_type']) ? $param['layout']['list_type'] : 'default';
      $element[$delta] = array(
        '#markup' => $view->preview($list_type, $args)
      );
    } else {
      return;
    }
  }
  return $element;
}

/**
 * Build a terms options array.
 * @param $vid
 * @return All terms 
 */
function _simpleviews_field_get_term_options($vid) {
  //$term_options['all'] = t('- All -');
  $term_options = array();
  if (is_numeric($vid)) {
    foreach (taxonomy_get_tree($vid) as $term_obj) {
      $term_options[$term_obj->tid] = check_plain($term_obj->name);
    }
  }
  return $term_options;
}

/**
 * Implements hook_views_api().
 */
function simpleviews_field_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_views_query_alter().
 */
function simpleviews_field_views_query_alter(&$view, &$query) {
  if ($view->name == _simpleviews_field_get_default_view(null, $view->name)) {
    // Layout.
    (bool)$pager_type = $view->args[0]  ? 'full' : 'some'; // full, some, none
    (int)$items_per_page = $view->args[1];

    $view->display_handler->default_display->options['pager']['type'] = $pager_type;
    $view->display_handler->default_display->options['pager']['options']['items_per_page'] = $items_per_page;

    // Sorting.
    (string)$sort_type = $view->args[2];
    (bool)$sort_order = $view->args[3];

    $sort_array =& $view->query->orderby;
    foreach ($sort_array as $k => $v) {
      if ($k != $sort_order) {
        unset($sort_array[$k]);
      }
      else {
        $sort_array[$k]['field'] = $sort_type;
        $sort_array[$k]['direction'] = !$sort_order ? 'asc' : 'desc';
      }
    }  
    foreach ($view->filter as $k => $filter) {
      if ($filter->options['exposed']) {
        $expo[] = $k;
      }      
    }
    if (!isset($expo) || empty($expo)) {
      unset($view->exposed_widgets );
    }
    
    //fixing same term on exposed filter + term filter
    foreach ($query->table_queue as $key => $item) {
      if (strpos($key, 'taxonomy_index') !== false) {
        if (isset($item['join']) && isset($item['join']->extra[0]) && isset($item['join']->extra[0]['operator']) && $item['join']->extra[0]['operator'] == '!=') {
          unset($query->table_queue[$key]['join']->extra[0]);
        }
      }
    }
  } 
}

/**
 * Implements hook_views_pre_build().
 */
function simpleviews_field_views_pre_build(&$view) {
  if ($view->name == _simpleviews_field_get_default_view(null, $view->name)) { 
    // Exposed Filters.
    // Removing exposed filters from display, 
    // have to occur quite early in the view building.
    $show_form = $view->args[4];
    $exposed_vocabulary = $view->args[5];
    $toggle_search = $view->args[6];

    // Remove the exposed filters by default   
    if (!isset($toggle_search) || empty($toggle_search)) {
      unset($view->filter['title']);
    }
    if (!isset($show_form) || empty($show_form)) {
      //$view->filter['tid']->options['exposed'] = FALSE;
      unset($view->filter['tid']);
    }
    // Set the vocabulary for the expose filter.
    else {
      $view->filter['tid']->options['vocabulary'] = $exposed_vocabulary;
    }
  }
}

/**
 * Get the default view from the field settings.
 */
function _simpleviews_field_get_default_view($field = null, $view = null) {
  if ($field != null) {
    return !empty($field['settings']['default_view']) ? $field['settings']['default_view'] : 'simpleviews_field_dynamic_view';
  }
  
  if ($view != null) {
    $views = variable_get('simpleviews_field_get_views', array('simpleviews_field_dynamic_view'));
    if (in_array($view, $views)) {
      return $view;
    }
  }
  $field_info = field_info_field('field_list');
  return !empty($field_info['settings']['default_view']) ? $field_info['settings']['default_view'] : 'simpleviews_field_dynamic_view';
}